#
# REMEMBER !!!
#
# To run nginx with your config you are obligated to make change in bin/compile (in line 9 address to your repo)
#

daemon off;
#Heroku dynos have at least 4 cores.
worker_processes <%= ENV['NGINX_WORKERS'] || 4 %>;

events {
	use epoll;
	accept_mutex on;
	worker_connections 1024;
}

http {
	gzip on;
	gzip_comp_level 2;
	gzip_min_length 512;

	server_tokens off;

	log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
	access_log logs/nginx/access.log l2met;
	error_log logs/nginx/error.log;

	include mime.types;
	default_type application/octet-stream;
	sendfile on;

	#Must read the body in 5 seconds.
	client_body_timeout 5;

	upstream app_server {
		server unix:/tmp/nginx.socket fail_timeout=0;
 	}

	server {
		listen <%= ENV["PORT"] %>;
		root /app/<%= ENV["ROOT"] %>;
		server_name _;
		keepalive_timeout 5;
		gzip on;

		location / {
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header Host $http_host;
			proxy_redirect off;
			try_files $uri @prerender;
		}

		location /api {
			proxy_pass <%= ENV["PROXY"] %>;
		}
		location ~* \.(css|js)\?rel=.*$ {
			expires max;
		}

		location @prerender {
			set $prerender 0;
			if ($http_user_agent ~* "baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
				set $prerender 1;
			}
			if ($args ~ "_escaped_fragment_") {
				set $prerender 1;
			}
			if ($http_user_agent ~ "Prerender") {
				set $prerender 0;
			}
			if ($uri ~ "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff)") {
				set $prerender 0;
			}

			#resolve using Google's DNS server to force DNS resolution and prevent caching of IPs
			resolver 8.8.8.8;

			if ($prerender = 1) {
				#setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
				set $prerender "service.prerender.io";
				rewrite .* /$scheme://$host$request_uri? break;
				proxy_pass http://$prerender;
			}
			if ($prerender = 0) {
				rewrite .* /index.html break;
			}
		}
	}
}
